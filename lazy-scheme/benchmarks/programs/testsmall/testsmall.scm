(define (sum l)  (let ((c (null? l)))    (if c	0	(let ((a0 (car l)))	  (let ((b0 (cdr l)))	    (let ((a1 (sum b0)))	      (let ((res (+ a0 a1)))		res)))))))
(define (f x y n)  (let ((z 0))    (let ((c (eq? n z)))      (if c	  0	  (let ((a (sum y)))	    (let ((one 1))	      (let ((m (- n one)))		(let ((b (f x y m)))		  (let ((d (+ a b)))		    d)))))))))
(let ((a0 '()))
(let ((b1 1))
(let ((a1 (cons b1 a0)))
(let ((b2 2))
(let ((a2 (cons b2 a1)))
(let ((b3 3))
(let ((a3 (cons b3 a2)))
(let ((b4 4))
(let ((a4 (cons b4 a3)))
(let ((b5 5))
(let ((a5 (cons b5 a4)))
(let ((b6 6))
(let ((a6 (cons b6 a5)))
(let ((b7 7))
(let ((a7 (cons b7 a6)))
(let ((b8 8))
(let ((a8 (cons b8 a7)))
(let ((b9 9))
(let ((a9 (cons b9 a8)))
(let ((x '())) (let ((y1 1)) (let ((x1 (cons y1 x))) (let ((y2 2)) (let ((x2 (cons y2 x1))) (let ((y3 3)) (let ((x3 (cons y3 x2))) (let ((n 9)) (let ((res (f a9 x3 n))) (let ((hd (car a9))) (let ((res1 (+ res hd)))  res1)))))))))))
)))))))))))))))))))
