#include<string>
using namespace std;

class Node
{
	Node();
	void getPgmPt();
	int reurnPgmPt();
	void setPgmPt(int);
	int Pgmpt(); //Why do we need both returnPgmPt and Pgmpt? they seem to be doing the same thing.
	string asString();
	virtual Node* getExp() = 0;
	virtual void print(int indent) = 0;
	virtual Node* makeCopy() = 0;
	void setLiveness();
	void getLiveness();
	virtual ~Node();
protected:
	int pgmpt;
};

class NilExprNode :: public Node
{
virtual Node* getExpr();
virtual void print(int indent);
virtual ~NilExprNode();
};

class ConstIntExprNode :: public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~ConstExprNode();
private:
	int val;
};

class ConstBoolExprNode :: public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~ConstExprNode();
private:
	bool val;
};

class ConstStringExprNode :: public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~ConstExprNode();
private:
	string val;

};

class VarExprNode :: public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~VarExprNode();
	string getName ();
private:
	string name;
	//maintain a global list for all variables and add this to that list.
};

class IfExprNode :: public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~VarExprNode();
	Node* getCond();
	Node* getThenPart();
	Node* getElsePart();
private:
	Node* cond;
	Node* thenpart;
	Node* elsepart;
};

class letExprNode :: public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~VarExprNode();
	string getVar();
	Node* getVarExpr();
	Node* getBody();
private:
	string var;
	Node* varExpr;
	Node* bodyExpr;
};

class PrimitiveExprNode :: public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~VarExprNode();
	string getPrimitive();
	vector<Node*>& getArgs();
private:
	string primitive;
	vector<Node*> args;
}






