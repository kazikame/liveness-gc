#include<string>
#include<map>
#include<vector>
using namespace std;
class Node;

enum exprType
{
	nilExpr;
	constIntExpr;
	constBoolExpr;
	constStringExpr;
	varExpr;
	letExpr;
	funcDefineExpr;
	funcApplicationExpr;
	consExpr;
	carExpr;
	cdrExpr;
	nullqExpr;
	pairqExpr;
	addExpr;
	subExpr;
	mulExpr;
	divExpr;
	gtExpr;
	ltExpr;
	modExpr;
	eqExpr;
	ifExpr;

};

typedef map<string, Node*> funcMap;

class Node
{
	Node();
	void getPgmPt();
	int reurnPgmPt();
	void setPgmPt(int);
	int Pgmpt(); //Why do we need both returnPgmPt and Pgmpt? they seem to be doing the same thing.
	string asString();
	virtual Node* getExp() = 0;
	virtual void print(int indent) = 0;
	virtual Node* makeCopy() = 0;
	void setLiveness();
	void getLiveness();
	virtual ~Node();
protected:
	int pgmpt;
};

class NilExprNode : public Node
{
virtual Node* getExpr();
virtual void print(int indent);
virtual ~NilExprNode();
};

class ConstIntExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~ConstIntExprNode();
private:
	int val;
};

class ConstBoolExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~ConstBoolExprNode();
private:
	bool val;
};

class ConstStringExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~ConstStringExprNode();
private:
	string val;

};

class VarExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~VarExprNode();
	string getName ();
private:
	string name;
	//maintain a global list for all variables and add this to that list.
};

class IfExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~IfExprNode();
	Node* getCond();
	Node* getThenPart();
	Node* getElsePart();
private:
	Node* cond;
	Node* thenpart;
	Node* elsepart;
};

class letExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~letExprNode();
	string getVar();
	Node* getVarExpr();
	Node* getBody();
private:
	string var;
	Node* varExpr;
	Node* bodyExpr;
};

class PrimitiveExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~PrimitiveExprNode();
	string getPrimitive();
	vector<Node*>& getArgs();
private:
	string primitive;
	vector<Node*> args;
};

class FunctionApplicationExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~FunctionApplicationExprNode();
	string getFunction();
	vector<Node*>& getArgs();
	int getNumArgs();
private:
	string function;
	vector<Node*> args;
};

class FunctionDefinitionExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~FunctionDefinitionExprNode();
	string getFuncName();
	vector<Node*>& getArgs();
	Node* getFunctionBody();
	int getNumArgs();
private:
	string funcName;
	vector<Node*> args;
	Node* funcBody;
};

class ProgramExprNode : public Node
{
	virtual Node* getExpr();
	virtual void print(int indent);
	virtual ~ProgramExprNode();
	vector<Node*>& getDefines();
	Node* getMainExpr();
	Node* getFunction(string funcName);
	funcMap getFunctionMap();
	vector<int> getPgmPts();
private:
	funcMap fmap;
	vector<int> pgmpts;
	Node* mainExpr;
	vector<Node*> defines;

};






